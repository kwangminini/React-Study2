{"ast":null,"code":"var _jsxFileName = \"/Users/kwangmin/Desktop/React Velopert/TypeScriptStudy/ts-react-tutorial/src/SampleContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { createContext, useReducer, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'SET_COUNT':\n      return { ...state,\n        count: action.count\n      };\n\n    case 'SET_TEXT':\n      return { ...state,\n        text: action.text\n      };\n\n    case 'SET_COLOR':\n      return { ...state,\n        color: action.color\n      };\n\n    case 'TOGGLE_GOOD':\n      return { ...state,\n        isGood: !state.isGood\n      };\n\n    default:\n      throw new Error('Unhandled action type');\n  }\n}\n\nconst SampleStateContext = /*#__PURE__*/createContext(null);\nconst SampleDispatchContext = /*#__PURE__*/createContext(null);\nexport function SampleProvider({\n  children\n}) {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, {\n    count: 0,\n    text: 'hello',\n    color: 'red',\n    isGood: true\n  });\n  return /*#__PURE__*/_jsxDEV(SampleStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(SampleDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SampleProvider, \"kVwWG687/Qw5xtM+tA5Q1ukSdWY=\");\n\n_c = SampleProvider;\nexport function useSampleState() {\n  _s2();\n\n  const state = useContext(SampleStateContext);\n  if (!state) throw new Error('Cannot find SampleProvider');\n  return state;\n}\n\n_s2(useSampleState, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useSampleDispatch() {\n  _s3();\n\n  const dispatch = useContext(SampleDispatchContext);\n  if (!dispatch) throw new Error('Cannot find SampleProvider');\n  return dispatch;\n}\n\n_s3(useSampleDispatch, \"kCU+r/6VuXUfg74P0SIOBSNFld8=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"SampleProvider\");","map":{"version":3,"sources":["/Users/kwangmin/Desktop/React Velopert/TypeScriptStudy/ts-react-tutorial/src/SampleContext.tsx"],"names":["React","createContext","useReducer","useContext","reducer","state","action","type","count","text","color","isGood","Error","SampleStateContext","SampleDispatchContext","SampleProvider","children","dispatch","useSampleState","useSampleDispatch"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAAqDC,UAArD,QAAuE,OAAvE;;;AAiBA,SAASC,OAAT,CAAiBC,KAAjB,EAA+BC,MAA/B,EAAsD;AAClD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,WAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHG,QAAAA,KAAK,EAAEF,MAAM,CAACE;AAFX,OAAP;;AAIJ,SAAK,UAAL;AACI,aAAM,EACF,GAAGH,KADD;AAEFI,QAAAA,IAAI,EAAEH,MAAM,CAACG;AAFX,OAAN;;AAIJ,SAAK,WAAL;AACI,aAAO,EACH,GAAGJ,KADA;AAEHK,QAAAA,KAAK,EAAEJ,MAAM,CAACI;AAFX,OAAP;;AAIJ,SAAK,aAAL;AACI,aAAM,EACF,GAAGL,KADD;AAEFM,QAAAA,MAAM,EAAE,CAACN,KAAK,CAACM;AAFb,OAAN;;AAIJ;AACI,YAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AAtBR;AAwBH;;AAED,MAAMC,kBAAkB,gBAAGZ,aAAa,CAAe,IAAf,CAAxC;AACA,MAAMa,qBAAqB,gBAAGb,aAAa,CAA0B,IAA1B,CAA3C;AAMA,OAAO,SAASc,cAAT,CAAwB;AAACC,EAAAA;AAAD,CAAxB,EAAuD;AAAA;;AAC1D,QAAM,CAACX,KAAD,EAAQY,QAAR,IAAoBf,UAAU,CAACE,OAAD,EAAS;AACzCI,IAAAA,KAAK,EAAE,CADkC;AAEzCC,IAAAA,IAAI,EAAE,OAFmC;AAGzCC,IAAAA,KAAK,EAAE,KAHkC;AAIzCC,IAAAA,MAAM,EAAE;AAJiC,GAAT,CAApC;AAOA,sBACI,QAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEN,KAApC;AAAA,2BACI,QAAC,qBAAD,CAAuB,QAAvB;AAAgC,MAAA,KAAK,EAAEY,QAAvC;AAAA,gBACKD;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAfeD,c;;KAAAA,c;AAiBhB,OAAO,SAASG,cAAT,GAA0B;AAAA;;AAC7B,QAAMb,KAAK,GAAGF,UAAU,CAACU,kBAAD,CAAxB;AACA,MAAG,CAACR,KAAJ,EAAW,MAAM,IAAIO,KAAJ,CAAU,4BAAV,CAAN;AACX,SAAOP,KAAP;AACH;;IAJea,c;;AAMhB,OAAO,SAASC,iBAAT,GAA4B;AAAA;;AAC/B,QAAMF,QAAQ,GAAGd,UAAU,CAACW,qBAAD,CAA3B;AACA,MAAI,CAACG,QAAL,EAAe,MAAM,IAAIL,KAAJ,CAAU,4BAAV,CAAN;AACf,SAAOK,QAAP;AACH;;IAJeE,iB","sourcesContent":["import React, { createContext, useReducer, Dispatch, useContext } from 'react';\n\ntype Color = 'red' | 'orange' | 'yellow';\n\ntype State = {\n    count: number;\n    text: string;\n    color: Color;\n    isGood : boolean;\n}\n\ntype Action = { type : 'SET_COUNT'; count: number}\n            | {type:'SET_TEXT'; text: string}\n            | {type: 'SET_COLOR'; color: Color}\n            | {type: 'TOGGLE_GOOD'};\n\n\nfunction reducer(state: State, action: Action) : State{\n    switch(action.type){\n        case 'SET_COUNT':\n            return {\n                ...state,\n                count: action.count\n            };\n        case 'SET_TEXT':\n            return{\n                ...state,\n                text: action.text\n            };\n        case 'SET_COLOR':\n            return {\n                ...state,\n                color: action.color\n            };\n        case 'TOGGLE_GOOD':\n            return{\n                ...state,\n                isGood: !state.isGood\n            };\n        default:\n            throw new Error('Unhandled action type');\n    }    \n}\n\nconst SampleStateContext = createContext<State | null>(null);\nconst SampleDispatchContext = createContext<Dispatch<Action> | null>(null);\n\ntype SampleProviderProps = {\n    children: React.ReactNode;\n}\n\nexport function SampleProvider({children}:SampleProviderProps){\n    const [state, dispatch] = useReducer(reducer,{\n        count: 0,\n        text: 'hello',\n        color: 'red',\n        isGood: true\n    });\n\n    return(\n        <SampleStateContext.Provider value={state}>\n            <SampleDispatchContext.Provider value={dispatch}>\n                {children}\n            </SampleDispatchContext.Provider>\n        </SampleStateContext.Provider>\n    )\n}\n\nexport function useSampleState() {\n    const state = useContext(SampleStateContext);\n    if(!state) throw new Error('Cannot find SampleProvider');\n    return state;\n}\n\nexport function useSampleDispatch(){\n    const dispatch = useContext(SampleDispatchContext);\n    if (!dispatch) throw new Error('Cannot find SampleProvider');\n    return dispatch;\n}"]},"metadata":{},"sourceType":"module"}