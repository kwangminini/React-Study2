{"ast":null,"code":"var _jsxFileName = \"/Users/kwangmin/Desktop/React Velopert/TypeScriptStudy/ts-react-tutorial/src/ReducerSample.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'SET_COUNT':\n      return { ...state,\n        count: action.count\n      };\n\n    case 'SET_TEXT':\n      return { ...state,\n        text: action.text\n      };\n\n    case 'SET_COLOR':\n      return { ...state,\n        color: action.color\n      };\n\n    case 'TOGGLE_GOOD':\n      return { ...state,\n        isGood: !state.isGood\n      };\n\n    default:\n      throw new Error('Unhandled action type');\n  }\n}\n\nfunction ReducerSample() {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, {\n    count: 0,\n    text: 'hello',\n    color: 'red',\n    isGood: true\n  });\n\n  const setCount = () => dispatch({\n    type: 'SET_COUNT',\n    count: 5\n  });\n\n  const setText = () => dispatch({\n    type: 'SET_TEXT',\n    text: 'bye'\n  });\n\n  const setColor = () => dispatch({\n    type: 'SET_COLOR',\n    color: 'orange'\n  });\n\n  const toggleGood = () => dispatch({\n    type: 'TOGGLE_GOOD'\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"count: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), \" \", state.count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"text: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), \" \", state.text]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"color: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), \" \", state.color]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"isGood: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), \" \", state.isGood ? 'true' : 'false']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setCount,\n        children: \"SET_COUNT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setText,\n        children: \"SET_TEXT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setColor,\n        children: \"SET_COLOR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleGood,\n        children: \"TOGGLE_GOOD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ReducerSample, \"kVwWG687/Qw5xtM+tA5Q1ukSdWY=\");\n\n_c = ReducerSample;\nexport default ReducerSample;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReducerSample\");","map":{"version":3,"sources":["/Users/kwangmin/Desktop/React Velopert/TypeScriptStudy/ts-react-tutorial/src/ReducerSample.tsx"],"names":["React","useReducer","reducer","state","action","type","count","text","color","isGood","Error","ReducerSample","dispatch","setCount","setText","setColor","toggleGood"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;;;AAiBA,SAASC,OAAT,CAAiBC,KAAjB,EAA+BC,MAA/B,EAAsD;AAClD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,WAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHG,QAAAA,KAAK,EAAEF,MAAM,CAACE;AAFX,OAAP;;AAIJ,SAAK,UAAL;AACI,aAAM,EACF,GAAGH,KADD;AAEFI,QAAAA,IAAI,EAAEH,MAAM,CAACG;AAFX,OAAN;;AAIJ,SAAK,WAAL;AACI,aAAO,EACH,GAAGJ,KADA;AAEHK,QAAAA,KAAK,EAAEJ,MAAM,CAACI;AAFX,OAAP;;AAIJ,SAAK,aAAL;AACI,aAAM,EACF,GAAGL,KADD;AAEFM,QAAAA,MAAM,EAAE,CAACN,KAAK,CAACM;AAFb,OAAN;;AAIJ;AACI,YAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AAtBR;AA0BH;;AAED,SAASC,aAAT,GAA0B;AAAA;;AACtB,QAAM,CAACR,KAAD,EAAQS,QAAR,IAAoBX,UAAU,CAACC,OAAD,EAAS;AACzCI,IAAAA,KAAK,EAAE,CADkC;AAEzCC,IAAAA,IAAI,EAAE,OAFmC;AAGzCC,IAAAA,KAAK,EAAE,KAHkC;AAIzCC,IAAAA,MAAM,EAAE;AAJiC,GAAT,CAApC;;AAMA,QAAMI,QAAQ,GAAG,MAAMD,QAAQ,CAAC;AAACP,IAAAA,IAAI,EAAE,WAAP;AAAoBC,IAAAA,KAAK,EAAC;AAA1B,GAAD,CAA/B;;AACA,QAAMQ,OAAO,GAAG,MAAMF,QAAQ,CAAC;AAACP,IAAAA,IAAI,EAAE,UAAP;AAAmBE,IAAAA,IAAI,EAAC;AAAxB,GAAD,CAA9B;;AACA,QAAMQ,QAAQ,GAAG,MAAMH,QAAQ,CAAC;AAACP,IAAAA,IAAI,EAAE,WAAP;AAAoBG,IAAAA,KAAK,EAAE;AAA3B,GAAD,CAA/B;;AACA,QAAMQ,UAAU,GAAG,MAAMJ,QAAQ,CAAC;AAACP,IAAAA,IAAI,EAAE;AAAP,GAAD,CAAjC;;AAEA,sBACI;AAAA,4BACI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,OAC0BF,KAAK,CAACG,KADhC;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,OACyBH,KAAK,CAACI,IAD/B;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAOI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,OAC0BJ,KAAK,CAACK,KADhC;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,eAUI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,OAC2BL,KAAK,CAACM,MAAN,GAAe,MAAf,GAAwB,OADnD;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ,eAaI;AAAA,8BACI;AAAQ,QAAA,OAAO,EAAEI,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,OAAO,EAAEC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,OAAO,EAAEC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAQ,QAAA,OAAO,EAAEC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAuBH;;GAnCQL,a;;KAAAA,a;AAqCT,eAAeA,aAAf","sourcesContent":["import React, {useReducer} from 'react';\n\ntype Color = 'red' | 'orange' | 'yellow';\n\ntype State = {\n    count: number;\n    text: string;\n    color: Color;\n    isGood : boolean;\n}\n\ntype Action = { type : 'SET_COUNT'; count: number}\n            | {type:'SET_TEXT'; text: string}\n            | {type: 'SET_COLOR'; color: Color}\n            | {type: 'TOGGLE_GOOD'};\n\n\nfunction reducer(state: State, action: Action) : State{\n    switch(action.type){\n        case 'SET_COUNT':\n            return {\n                ...state,\n                count: action.count\n            };\n        case 'SET_TEXT':\n            return{\n                ...state,\n                text: action.text\n            };\n        case 'SET_COLOR':\n            return {\n                ...state,\n                color: action.color\n            };\n        case 'TOGGLE_GOOD':\n            return{\n                ...state,\n                isGood: !state.isGood\n            };\n        default:\n            throw new Error('Unhandled action type');\n\n    }    \n\n}\n\nfunction ReducerSample () {\n    const [state, dispatch] = useReducer(reducer,{\n        count: 0,\n        text: 'hello',\n        color: 'red',\n        isGood: true\n    });\n    const setCount = () => dispatch({type: 'SET_COUNT', count:5});\n    const setText = () => dispatch({type: 'SET_TEXT', text:'bye'});\n    const setColor = () => dispatch({type: 'SET_COLOR', color: 'orange'});\n    const toggleGood = () => dispatch({type: 'TOGGLE_GOOD'});\n\n    return(\n        <div>\n            <p>\n                <code>count: </code> {state.count}\n            </p>\n            <p>\n                <code>text: </code> {state.text}\n            </p>\n            <p>\n                <code>color: </code> {state.color}\n            </p>\n            <p>\n                <code>isGood: </code> {state.isGood ? 'true' : 'false'}\n            </p>\n            <div>\n                <button onClick={setCount}>SET_COUNT</button>\n                <button onClick={setText}>SET_TEXT</button>\n                <button onClick={setColor}>SET_COLOR</button>\n                <button onClick={toggleGood}>TOGGLE_GOOD</button>\n\n            </div>\n        </div>\n    )\n}\n\nexport default ReducerSample;"]},"metadata":{},"sourceType":"module"}